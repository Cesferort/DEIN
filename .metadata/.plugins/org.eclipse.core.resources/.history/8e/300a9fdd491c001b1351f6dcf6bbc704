package Ventana;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import javax.swing.BoxLayout;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

import Componentes.JTextFieldNumericos;
import Componentes.ModeloTablaUsuarios;
import Excepciones.DatosDepException;
import XML.GestorXML;
import beans.Usuario;
import java.awt.Component;

/**
 * Clase que representa la ventana de visualización, edición e 
 * inserción de los usuarios.
 * @author Cesferort
 * @since 1.0
 */
public class InternalUsuario extends JInternalFrame
{
	private static final long serialVersionUID = 1L;
	private final Color LIGHT_RED = new Color(255,102,102);
	private final Color LIGHT_GREEN = new Color(102,255,102);
	
	private JTable tablaUsu;
	private ModeloTablaUsuarios modeloTablaUsu;
	private GestorXML gestorXML;
	private JTextFieldNumericos numUsu;
	private JTextField nomUsu;
	private JTextFieldNumericos conUsu;
	private JComboBox<String>esAdmin;
	private JButton butCambiarModo;
	private JButton butGuardar;
	private boolean modoEdicion;
	
	/**
	 * Constructor del InternalUsuario. Inicializa el modo de la 
	 * ventana a edición.
	 * @since 1.0
	 */
	public InternalUsuario()
	{
		modoEdicion = true;
		gestorXML = new GestorXML();
		dibujar();
		eventos();
	}
	
	/**
     * Método que dibuja el frame. Será llamado por el constructor.
     * @since 1.0
     */
	private void dibujar()
	{
		this.setTitle("Usuarios (Modo EDICIÓN)");
		getContentPane().setLayout(new GridLayout(1,2));
		
		ArrayList<Usuario>listaUsuarios = gestorXML.conseguirUsuarios();
		modeloTablaUsu = new ModeloTablaUsuarios(listaUsuarios);
		tablaUsu = new JTable(modeloTablaUsu);
		tablaUsu.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		numUsu = new JTextFieldNumericos();
		numUsu.setEditable(false);
		numUsu.setPreferredSize(new Dimension(200,20));
		nomUsu = new JTextField();
		nomUsu.setPreferredSize(new Dimension(200,20));
		conUsu = new JTextFieldNumericos();
		conUsu.setPreferredSize(new Dimension(200,20));
		
		JPanel panId = new JPanel();
		panId.setAlignmentX(Component.LEFT_ALIGNMENT);
		panId.setLayout(new FlowLayout());
		JLabel labId = new JLabel("Identificador:");
		labId.setPreferredSize(new Dimension(150,20));
		panId.add(labId);
		panId.add(numUsu);
		
		JPanel panNom = new JPanel();
		panNom.setAlignmentX(Component.LEFT_ALIGNMENT);
		panNom.setLayout(new FlowLayout());
		JLabel labNom = new JLabel("Nombre:");
		labNom.setPreferredSize(new Dimension(150,20));
		panNom.add(labNom);
		panNom.add(nomUsu);
		
		JPanel panCon = new JPanel();
		panCon.setAlignmentX(Component.LEFT_ALIGNMENT);
		panCon.setLayout(new FlowLayout());
		JLabel labCon = new JLabel("Contraseña:");
		labCon.setPreferredSize(new Dimension(150,20));
		panCon.add(labCon);
		panCon.add(conUsu);
		
		JPanel panAdmin = new JPanel();
		panAdmin.setAlignmentX(Component.LEFT_ALIGNMENT);
		panAdmin.setLayout(new FlowLayout());
		JLabel labAdmin = new JLabel("Es Admin:");
		labAdmin.setPreferredSize(new Dimension(150,20));
		panAdmin.add(labAdmin);
		esAdmin = new JComboBox<String>();
		esAdmin.addItem("NO");
		esAdmin.addItem("SÍ");
		esAdmin.setSelectedItem("NO");
		esAdmin.setPreferredSize(new Dimension(200,20));
		panAdmin.add(esAdmin);
		
		JPanel panInsercion = new JPanel();
		panInsercion.setAlignmentX(Component.LEFT_ALIGNMENT);
		panInsercion.setLayout(new FlowLayout());
		JLabel espacioBlanco1 = new JLabel();
		espacioBlanco1.setPreferredSize(new Dimension(150,20));
		panInsercion.add(espacioBlanco1);
		butCambiarModo = new JButton("Modo INSERCIÓN");
		butCambiarModo.setPreferredSize(new Dimension(200,20));
		panInsercion.add(butCambiarModo);
		JPanel panGuardar = new JPanel();
		panGuardar.setAlignmentX(Component.LEFT_ALIGNMENT);
		panGuardar.setLayout(new FlowLayout());
		JLabel espacioBlanco2 = new JLabel();
		espacioBlanco2.setPreferredSize(new Dimension(150,20));
		panGuardar.add(espacioBlanco2);
		butGuardar = new JButton("Guardar"); 
		butGuardar.setPreferredSize(new Dimension(200,20));
		panGuardar.add(butGuardar);
		
		JPanel panDerecha = new JPanel();
		panDerecha.setLayout(new BoxLayout(panDerecha,BoxLayout.Y_AXIS));
		panDerecha.add(panId);
		panDerecha.add(panNom);
		panDerecha.add(panCon);
		panDerecha.add(panAdmin);
		panDerecha.add(panInsercion);
		panDerecha.add(panGuardar);
		
		getContentPane().add(new JScrollPane(tablaUsu));
		getContentPane().add(panDerecha);
		
		this.pack();
		this.setResizable(false);
		this.setClosable(true);
        this.setMaximizable(true);
        try 
        {
			this.setMaximum(true);
		} 
        catch (PropertyVetoException e) 
        {
			e.printStackTrace();
		}
        this.setIconifiable(true);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	}
	
	/**
     * Método que creará escuchadores relacionados con elementos del frame.
     * Será llamado por el constructor.
     * @since 1.0
     */
	private void eventos()
	{
		ListSelectionModel selectionModel = tablaUsu.getSelectionModel();
		selectionModel.addListSelectionListener(new TablaUsuListener()); 

		butCambiarModo.addActionListener(new CambiarModoListener(this));	
		butGuardar.addActionListener(new ButGuardarListener());
		
		numUsu.addKeyListener(new TextFieldListener());
		nomUsu.addKeyListener(new TextFieldListener());
		conUsu.addKeyListener(new TextFieldListener());
	}
	
	/**
     * Clase escuchadora de acciones sobre la tabla de usuarios.
     * @author Cesferort
     * @since 1.0
     */
	private class TablaUsuListener implements ListSelectionListener
	{
	    public void valueChanged(ListSelectionEvent evento) 
	    {
	    	DefaultListSelectionModel model = (DefaultListSelectionModel) evento.getSource();
	    	int indiceUsuario = model.getLeadSelectionIndex();
	    	try 
	    	{
	    		String idUsuSelec = String.valueOf(modeloTablaUsu.getValueAt(indiceUsuario, 0));
		    	String nomUsuSelec = String.valueOf(modeloTablaUsu.getValueAt(indiceUsuario, 1));
		    	String conUsuSelec = String.valueOf(modeloTablaUsu.getValueAt(indiceUsuario, 2));
			    boolean esAdminSelec = Boolean.parseBoolean(String.valueOf(modeloTablaUsu.getValueAt(indiceUsuario, 3)));
			    
				numUsu.setText(idUsuSelec);
				nomUsu.setText(nomUsuSelec);
				conUsu.setText(conUsuSelec);
				if(esAdminSelec == false)
					esAdmin.setSelectedIndex(0);
				else
					esAdmin.setSelectedIndex(1);
	    	}
	    	catch(Exception e) 
	    	{
	    		JOptionPane.showMessageDialog
				(null, e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
	    	}
	    }
	}

	/**
     * Clase escuchadora de acciones sobre el botón butCambiarModo.
     * @author Cesferort
     * @since 1.0
     */
	private class CambiarModoListener implements ActionListener
	{
		InternalUsuario internalUsuario;
		
		public CambiarModoListener(InternalUsuario internalUsuario)
		{
			this.internalUsuario=internalUsuario;
		}
		
		public void actionPerformed(ActionEvent evento) 
		{
			limpiar();
			if(modoEdicion == true)
			{
				internalUsuario.setTitle("Usuarios (Modo INSERCIÓN)");
				numUsu.setEditable(true);
				butCambiarModo.setText("Modo EDICIÓN");
				modoEdicion = false;
			}
			else
			{
				internalUsuario.setTitle("Usuarios (Modo EDICIÓN)");
				numUsu.setEditable(false);
				butCambiarModo.setText("Modo INSERCI�N");
				modoEdicion = true;
			}
		}
	}
	
	
	//ESTO NO ME SIRVE DE UNA PUTA MIERDA HASTA K LO CAMBIE
	
	/**
     * Clase escuchadora de acciones sobre el botón butGuardar.
     * @author Cesferort
     * @since 1.0
     */
	private class ButGuardarListener implements ActionListener
	{
		public void actionPerformed(ActionEvent evento) 
		{
			try 
			{
				int erroresEncontrado = 0;
				String listaErrores="";
				
				int codDepParse = 0;
				String nomDepParse = "";
				int pesDepParse = 0;
				int altDepParse = 0;
				
				//CODIGO COMPROBACION
				if(numUsu.comprobarNumero()==false)
				{
					erroresEncontrado++;
					listaErrores += "- El valor introducido como Identificador no es válido\n";
				}
				else
					codDepParse = Integer.parseInt(numUsu.getText());
				
				//NOMBRE COMPROBACION
				nomDepParse = nomUsu.getText(); 
				if(nomDepParse == null || nomDepParse.length() == 0)
				{
					erroresEncontrado++;
					listaErrores += "- El valor introducido como Nombre no es válido\n";
					nomUsu.setBackground(LIGHT_RED);
				}
				else
					nomUsu.setBackground(LIGHT_GREEN);
				
				//PESO COMPROBACION
				if(conUsu.comprobarNumero(0,500)==false)
				{
					erroresEncontrado++;
					listaErrores += "- El valor introducido como Peso no es válido\n";
				}
				else
					pesDepParse = Integer.parseInt(conUsu.getText());
				
				//LANZAR ERRORES
				if(erroresEncontrado > 0)
				{
					if(erroresEncontrado == 1)
						listaErrores = "Valor no permitido encontrado:\n" + listaErrores;
					else
						listaErrores = "Valores no permitidos encontrados:\n" + listaErrores;
					
					throw new DatosDepException(listaErrores);
				}
				
				
				if(modoEdicion == false)
				{
					limpiar();
				}
				else
				{
					limpiar();
				}
			}
			catch(DatosDepException e)
			{
				JOptionPane.showMessageDialog
				(null, e.toString(),"Error",JOptionPane.ERROR_MESSAGE);
			}
		}
	}
	
	/**
     * Clase escuchadora de teclas sobre los text field codDep, nomDep, pesDep y altDep.
     * @author Cesferort
     * @since 1.0
     */
	private class TextFieldListener implements KeyListener
	{
		public void keyTyped(KeyEvent evento) 
		{
			JTextField txt = (JTextField)evento.getSource();
			txt.setBackground(Color.WHITE);
		}
		public void keyPressed(KeyEvent evento) {}
		public void keyReleased(KeyEvent evento) {}    	
	}
	
	/**
	 * Método que limpia el contenido y color de fondo de los campos del frame.
	 * @since 1.0
	 */
	private void limpiar()
	{
		numUsu.limpiar();
		nomUsu.setText("");
		nomUsu.setBackground(Color.WHITE);
		conUsu.limpiar();
	}
}